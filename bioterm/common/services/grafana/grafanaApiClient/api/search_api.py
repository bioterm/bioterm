# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictInt, StrictStr, field_validator

from typing import List, Optional

from grafanaApiClient.models.hit import Hit
from grafanaApiClient.models.list_sort_options200_response import ListSortOptions200Response

from grafanaApiClient.api_client import ApiClient
from grafanaApiClient.api_response import ApiResponse
from grafanaApiClient.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def list_sort_options(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListSortOptions200Response:
        """List search sorting options.


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_sort_options_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSortOptions200Response",
            '401': "ErrorResponseBody"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_sort_options_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListSortOptions200Response]:
        """List search sorting options.


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_sort_options_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSortOptions200Response",
            '401': "ErrorResponseBody"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_sort_options_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List search sorting options.


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_sort_options_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSortOptions200Response",
            '401': "ErrorResponseBody"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_sort_options_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'basic'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/sorting',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Search Query")] = None,
        tag: Annotated[Optional[List[StrictStr]], Field(description="List of tags to search for")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Type to search for, dash-folder or dash-db")] = None,
        dashboard_ids: Annotated[Optional[List[StrictInt]], Field(description="List of dashboard id’s to search for This is deprecated: users should use the `dashboardUIDs` query parameter instead")] = None,
        dashboard_uids: Annotated[Optional[List[StrictStr]], Field(description="List of dashboard uid’s to search for")] = None,
        folder_ids: Annotated[Optional[List[StrictInt]], Field(description="List of folder id’s to search in for dashboards If it's `0` then it will query for the top level folders This is deprecated: users should use the `folderUIDs` query parameter instead")] = None,
        folder_uids: Annotated[Optional[List[StrictStr]], Field(description="List of folder UID’s to search in for dashboards If it's an empty string then it will query for the top level folders")] = None,
        starred: Annotated[Optional[StrictBool], Field(description="Flag indicating if only starred Dashboards should be returned")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of returned results (max 5000)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.")] = None,
        permission: Annotated[Optional[StrictStr], Field(description="Set to `Edit` to return dashboards/folders that the user can edit")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort method; for listing all the possible sort methods use the search sorting endpoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Hit]:
        """search


        :param query: Search Query
        :type query: str
        :param tag: List of tags to search for
        :type tag: List[str]
        :param type: Type to search for, dash-folder or dash-db
        :type type: str
        :param dashboard_ids: List of dashboard id’s to search for This is deprecated: users should use the `dashboardUIDs` query parameter instead
        :type dashboard_ids: List[int]
        :param dashboard_uids: List of dashboard uid’s to search for
        :type dashboard_uids: List[str]
        :param folder_ids: List of folder id’s to search in for dashboards If it's `0` then it will query for the top level folders This is deprecated: users should use the `folderUIDs` query parameter instead
        :type folder_ids: List[int]
        :param folder_uids: List of folder UID’s to search in for dashboards If it's an empty string then it will query for the top level folders
        :type folder_uids: List[str]
        :param starred: Flag indicating if only starred Dashboards should be returned
        :type starred: bool
        :param limit: Limit the number of returned results (max 5000)
        :type limit: int
        :param page: Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.
        :type page: int
        :param permission: Set to `Edit` to return dashboards/folders that the user can edit
        :type permission: str
        :param sort: Sort method; for listing all the possible sort methods use the search sorting endpoint.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            query=query,
            tag=tag,
            type=type,
            dashboard_ids=dashboard_ids,
            dashboard_uids=dashboard_uids,
            folder_ids=folder_ids,
            folder_uids=folder_uids,
            starred=starred,
            limit=limit,
            page=page,
            permission=permission,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Hit]",
            '401': "ErrorResponseBody",
            '422': "ErrorResponseBody",
            '500': "ErrorResponseBody"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Search Query")] = None,
        tag: Annotated[Optional[List[StrictStr]], Field(description="List of tags to search for")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Type to search for, dash-folder or dash-db")] = None,
        dashboard_ids: Annotated[Optional[List[StrictInt]], Field(description="List of dashboard id’s to search for This is deprecated: users should use the `dashboardUIDs` query parameter instead")] = None,
        dashboard_uids: Annotated[Optional[List[StrictStr]], Field(description="List of dashboard uid’s to search for")] = None,
        folder_ids: Annotated[Optional[List[StrictInt]], Field(description="List of folder id’s to search in for dashboards If it's `0` then it will query for the top level folders This is deprecated: users should use the `folderUIDs` query parameter instead")] = None,
        folder_uids: Annotated[Optional[List[StrictStr]], Field(description="List of folder UID’s to search in for dashboards If it's an empty string then it will query for the top level folders")] = None,
        starred: Annotated[Optional[StrictBool], Field(description="Flag indicating if only starred Dashboards should be returned")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of returned results (max 5000)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.")] = None,
        permission: Annotated[Optional[StrictStr], Field(description="Set to `Edit` to return dashboards/folders that the user can edit")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort method; for listing all the possible sort methods use the search sorting endpoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Hit]]:
        """search


        :param query: Search Query
        :type query: str
        :param tag: List of tags to search for
        :type tag: List[str]
        :param type: Type to search for, dash-folder or dash-db
        :type type: str
        :param dashboard_ids: List of dashboard id’s to search for This is deprecated: users should use the `dashboardUIDs` query parameter instead
        :type dashboard_ids: List[int]
        :param dashboard_uids: List of dashboard uid’s to search for
        :type dashboard_uids: List[str]
        :param folder_ids: List of folder id’s to search in for dashboards If it's `0` then it will query for the top level folders This is deprecated: users should use the `folderUIDs` query parameter instead
        :type folder_ids: List[int]
        :param folder_uids: List of folder UID’s to search in for dashboards If it's an empty string then it will query for the top level folders
        :type folder_uids: List[str]
        :param starred: Flag indicating if only starred Dashboards should be returned
        :type starred: bool
        :param limit: Limit the number of returned results (max 5000)
        :type limit: int
        :param page: Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.
        :type page: int
        :param permission: Set to `Edit` to return dashboards/folders that the user can edit
        :type permission: str
        :param sort: Sort method; for listing all the possible sort methods use the search sorting endpoint.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            query=query,
            tag=tag,
            type=type,
            dashboard_ids=dashboard_ids,
            dashboard_uids=dashboard_uids,
            folder_ids=folder_ids,
            folder_uids=folder_uids,
            starred=starred,
            limit=limit,
            page=page,
            permission=permission,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Hit]",
            '401': "ErrorResponseBody",
            '422': "ErrorResponseBody",
            '500': "ErrorResponseBody"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Search Query")] = None,
        tag: Annotated[Optional[List[StrictStr]], Field(description="List of tags to search for")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Type to search for, dash-folder or dash-db")] = None,
        dashboard_ids: Annotated[Optional[List[StrictInt]], Field(description="List of dashboard id’s to search for This is deprecated: users should use the `dashboardUIDs` query parameter instead")] = None,
        dashboard_uids: Annotated[Optional[List[StrictStr]], Field(description="List of dashboard uid’s to search for")] = None,
        folder_ids: Annotated[Optional[List[StrictInt]], Field(description="List of folder id’s to search in for dashboards If it's `0` then it will query for the top level folders This is deprecated: users should use the `folderUIDs` query parameter instead")] = None,
        folder_uids: Annotated[Optional[List[StrictStr]], Field(description="List of folder UID’s to search in for dashboards If it's an empty string then it will query for the top level folders")] = None,
        starred: Annotated[Optional[StrictBool], Field(description="Flag indicating if only starred Dashboards should be returned")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit the number of returned results (max 5000)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.")] = None,
        permission: Annotated[Optional[StrictStr], Field(description="Set to `Edit` to return dashboards/folders that the user can edit")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort method; for listing all the possible sort methods use the search sorting endpoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """search


        :param query: Search Query
        :type query: str
        :param tag: List of tags to search for
        :type tag: List[str]
        :param type: Type to search for, dash-folder or dash-db
        :type type: str
        :param dashboard_ids: List of dashboard id’s to search for This is deprecated: users should use the `dashboardUIDs` query parameter instead
        :type dashboard_ids: List[int]
        :param dashboard_uids: List of dashboard uid’s to search for
        :type dashboard_uids: List[str]
        :param folder_ids: List of folder id’s to search in for dashboards If it's `0` then it will query for the top level folders This is deprecated: users should use the `folderUIDs` query parameter instead
        :type folder_ids: List[int]
        :param folder_uids: List of folder UID’s to search in for dashboards If it's an empty string then it will query for the top level folders
        :type folder_uids: List[str]
        :param starred: Flag indicating if only starred Dashboards should be returned
        :type starred: bool
        :param limit: Limit the number of returned results (max 5000)
        :type limit: int
        :param page: Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.
        :type page: int
        :param permission: Set to `Edit` to return dashboards/folders that the user can edit
        :type permission: str
        :param sort: Sort method; for listing all the possible sort methods use the search sorting endpoint.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            query=query,
            tag=tag,
            type=type,
            dashboard_ids=dashboard_ids,
            dashboard_uids=dashboard_uids,
            folder_ids=folder_ids,
            folder_uids=folder_uids,
            starred=starred,
            limit=limit,
            page=page,
            permission=permission,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Hit]",
            '401': "ErrorResponseBody",
            '422': "ErrorResponseBody",
            '500': "ErrorResponseBody"
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_serialize(
        self,
        query,
        tag,
        type,
        dashboard_ids,
        dashboard_uids,
        folder_ids,
        folder_uids,
        starred,
        limit,
        page,
        permission,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
            'tag': 'multi',
            'dashboardIds': 'multi',
            'dashboardUIDs': 'multi',
            'folderIds': 'multi',
            'folderUIDs': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if dashboard_ids is not None:
            
            _query_params.append(('dashboardIds', dashboard_ids))
            
        if dashboard_uids is not None:
            
            _query_params.append(('dashboardUIDs', dashboard_uids))
            
        if folder_ids is not None:
            
            _query_params.append(('folderIds', folder_ids))
            
        if folder_uids is not None:
            
            _query_params.append(('folderUIDs', folder_uids))
            
        if starred is not None:
            
            _query_params.append(('starred', starred))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if permission is not None:
            
            _query_params.append(('permission', permission))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key', 
            'basic'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


