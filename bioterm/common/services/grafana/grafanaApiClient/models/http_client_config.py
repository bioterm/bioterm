# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from grafanaApiClient.models.authorization import Authorization
from grafanaApiClient.models.basic_auth import BasicAuth
from grafanaApiClient.models.o_auth2 import OAuth2
from grafanaApiClient.models.tls_config import TLSConfig
from grafanaApiClient.models.url import URL
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HTTPClientConfig(BaseModel):
    """
    HTTPClientConfig
    """ # noqa: E501
    authorization: Optional[Authorization] = None
    basic_auth: Optional[BasicAuth] = None
    bearer_token: Optional[StrictStr] = None
    bearer_token_file: Optional[StrictStr] = Field(default=None, description="The bearer token file for the targets. Deprecated in favour of Authorization.CredentialsFile.")
    enable_http2: Optional[StrictBool] = Field(default=None, description="EnableHTTP2 specifies whether the client should configure HTTP2. The omitempty flag is not set, because it would be hidden from the marshalled configuration when set to false.")
    follow_redirects: Optional[StrictBool] = Field(default=None, description="FollowRedirects specifies whether the client should follow HTTP 3xx redirects. The omitempty flag is not set, because it would be hidden from the marshalled configuration when set to false.")
    no_proxy: Optional[StrictStr] = Field(default=None, description="NoProxy contains addresses that should not use a proxy.")
    oauth2: Optional[OAuth2] = None
    proxy_connect_header: Optional[Dict[str, List[StrictStr]]] = None
    proxy_from_environment: Optional[StrictBool] = Field(default=None, description="ProxyFromEnvironment makes use of net/http ProxyFromEnvironment function to determine proxies.")
    proxy_url: Optional[URL] = None
    tls_config: Optional[TLSConfig] = None
    __properties: ClassVar[List[str]] = ["authorization", "basic_auth", "bearer_token", "bearer_token_file", "enable_http2", "follow_redirects", "no_proxy", "oauth2", "proxy_connect_header", "proxy_from_environment", "proxy_url", "tls_config"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HTTPClientConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authorization
        if self.authorization:
            _dict['authorization'] = self.authorization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of basic_auth
        if self.basic_auth:
            _dict['basic_auth'] = self.basic_auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth2
        if self.oauth2:
            _dict['oauth2'] = self.oauth2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy_url
        if self.proxy_url:
            _dict['proxy_url'] = self.proxy_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tls_config
        if self.tls_config:
            _dict['tls_config'] = self.tls_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HTTPClientConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorization": Authorization.from_dict(obj.get("authorization")) if obj.get("authorization") is not None else None,
            "basic_auth": BasicAuth.from_dict(obj.get("basic_auth")) if obj.get("basic_auth") is not None else None,
            "bearer_token": obj.get("bearer_token"),
            "bearer_token_file": obj.get("bearer_token_file"),
            "enable_http2": obj.get("enable_http2"),
            "follow_redirects": obj.get("follow_redirects"),
            "no_proxy": obj.get("no_proxy"),
            "oauth2": OAuth2.from_dict(obj.get("oauth2")) if obj.get("oauth2") is not None else None,
            "proxy_connect_header": obj.get("proxy_connect_header"),
            "proxy_from_environment": obj.get("proxy_from_environment"),
            "proxy_url": URL.from_dict(obj.get("proxy_url")) if obj.get("proxy_url") is not None else None,
            "tls_config": TLSConfig.from_dict(obj.get("tls_config")) if obj.get("tls_config") is not None else None
        })
        return _obj


