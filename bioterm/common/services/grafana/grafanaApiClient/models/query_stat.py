# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from grafanaApiClient.models.data_link import DataLink
from grafanaApiClient.models.field_type_config import FieldTypeConfig
from grafanaApiClient.models.thresholds_config import ThresholdsConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class QueryStat(BaseModel):
    """
    The embedded FieldConfig's display name must be set. It corresponds to the QueryResultMetaStat on the frontend (https://github.com/grafana/grafana/blob/master/packages/grafana-data/src/types/data.ts#L53).
    """ # noqa: E501
    color: Optional[Union[str, Any]] = Field(default=None, description="Map values to a display color NOTE: this interface is under development in the frontend... so simple map for now")
    custom: Optional[Union[str, Any]] = Field(default=None, description="Panel Specific Values")
    decimals: Optional[StrictInt] = None
    description: Optional[StrictStr] = Field(default=None, description="Description is human readable field metadata")
    display_name: Optional[StrictStr] = Field(default=None, description="DisplayName overrides Grafana default naming, should not be used from a data source", alias="displayName")
    display_name_from_ds: Optional[StrictStr] = Field(default=None, description="DisplayNameFromDS overrides Grafana default naming strategy.", alias="displayNameFromDS")
    filterable: Optional[StrictBool] = Field(default=None, description="Filterable indicates if the Field's data can be filtered by additional calls.")
    interval: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Interval indicates the expected regular step between values in the series. When an interval exists, consumers can identify \"missing\" values when the expected value is not present. The grafana timeseries visualization will render disconnected values when missing values are found it the time field. The interval uses the same units as the values.  For time.Time, this is defined in milliseconds.")
    links: Optional[List[DataLink]] = Field(default=None, description="The behavior when clicking on a result")
    mappings: Optional[List[Union[str, Any]]] = None
    max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf to null.")
    min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ConfFloat64 is a float64. It Marshals float64 values of NaN of Inf to null.")
    no_value: Optional[StrictStr] = Field(default=None, description="Alternative to empty string", alias="noValue")
    path: Optional[StrictStr] = Field(default=None, description="Path is an explicit path to the field in the datasource. When the frame meta includes a path, this will default to `${frame.meta.path}/${field.name}  When defined, this value can be used as an identifier within the datasource scope, and may be used as an identifier to update values in a subsequent request")
    thresholds: Optional[ThresholdsConfig] = None
    type: Optional[FieldTypeConfig] = None
    unit: Optional[StrictStr] = Field(default=None, description="Numeric Options")
    value: Optional[Union[StrictFloat, StrictInt]] = None
    writeable: Optional[StrictBool] = Field(default=None, description="Writeable indicates that the datasource knows how to update this value")
    __properties: ClassVar[List[str]] = ["color", "custom", "decimals", "description", "displayName", "displayNameFromDS", "filterable", "interval", "links", "mappings", "max", "min", "noValue", "path", "thresholds", "type", "unit", "value", "writeable"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of QueryStat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of thresholds
        if self.thresholds:
            _dict['thresholds'] = self.thresholds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of QueryStat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "color": obj.get("color"),
            "custom": obj.get("custom"),
            "decimals": obj.get("decimals"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "displayNameFromDS": obj.get("displayNameFromDS"),
            "filterable": obj.get("filterable"),
            "interval": obj.get("interval"),
            "links": [DataLink.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "mappings": obj.get("mappings"),
            "max": obj.get("max"),
            "min": obj.get("min"),
            "noValue": obj.get("noValue"),
            "path": obj.get("path"),
            "thresholds": ThresholdsConfig.from_dict(obj.get("thresholds")) if obj.get("thresholds") is not None else None,
            "type": FieldTypeConfig.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "unit": obj.get("unit"),
            "value": obj.get("value"),
            "writeable": obj.get("writeable")
        })
        return _obj


