# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from grafanaApiClient.models.dashboard_dto import DashboardDTO
from grafanaApiClient.models.report_options_dto import ReportOptionsDTO
from grafanaApiClient.models.schedule_dto import ScheduleDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ConfigDTO(BaseModel):
    """
    ConfigDTO is model representation in transfer
    """ # noqa: E501
    created: Optional[datetime] = None
    dashboard_id: Optional[StrictInt] = Field(default=None, alias="dashboardId")
    dashboard_name: Optional[StrictStr] = Field(default=None, alias="dashboardName")
    dashboard_uid: Optional[StrictStr] = Field(default=None, alias="dashboardUid")
    dashboards: Optional[List[DashboardDTO]] = None
    enable_csv: Optional[StrictBool] = Field(default=None, alias="enableCsv")
    enable_dashboard_url: Optional[StrictBool] = Field(default=None, alias="enableDashboardUrl")
    formats: Optional[List[StrictStr]] = None
    id: Optional[StrictInt] = None
    message: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    options: Optional[ReportOptionsDTO] = None
    org_id: Optional[StrictInt] = Field(default=None, alias="orgId")
    recipients: Optional[StrictStr] = None
    reply_to: Optional[StrictStr] = Field(default=None, alias="replyTo")
    scale_factor: Optional[StrictInt] = Field(default=None, alias="scaleFactor")
    schedule: Optional[ScheduleDTO] = None
    state: Optional[StrictStr] = None
    template_vars: Optional[Union[str, Any]] = Field(default=None, alias="templateVars")
    updated: Optional[datetime] = None
    user_id: Optional[StrictInt] = Field(default=None, alias="userId")
    __properties: ClassVar[List[str]] = ["created", "dashboardId", "dashboardName", "dashboardUid", "dashboards", "enableCsv", "enableDashboardUrl", "formats", "id", "message", "name", "options", "orgId", "recipients", "replyTo", "scaleFactor", "schedule", "state", "templateVars", "updated", "userId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ConfigDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dashboards (list)
        _items = []
        if self.dashboards:
            for _item in self.dashboards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dashboards'] = _items
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ConfigDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "dashboardId": obj.get("dashboardId"),
            "dashboardName": obj.get("dashboardName"),
            "dashboardUid": obj.get("dashboardUid"),
            "dashboards": [DashboardDTO.from_dict(_item) for _item in obj.get("dashboards")] if obj.get("dashboards") is not None else None,
            "enableCsv": obj.get("enableCsv"),
            "enableDashboardUrl": obj.get("enableDashboardUrl"),
            "formats": obj.get("formats"),
            "id": obj.get("id"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "options": ReportOptionsDTO.from_dict(obj.get("options")) if obj.get("options") is not None else None,
            "orgId": obj.get("orgId"),
            "recipients": obj.get("recipients"),
            "replyTo": obj.get("replyTo"),
            "scaleFactor": obj.get("scaleFactor"),
            "schedule": ScheduleDTO.from_dict(obj.get("schedule")) if obj.get("schedule") is not None else None,
            "state": obj.get("state"),
            "templateVars": obj.get("templateVars"),
            "updated": obj.get("updated"),
            "userId": obj.get("userId")
        })
        return _obj


