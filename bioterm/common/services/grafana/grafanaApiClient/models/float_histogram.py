# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
from grafanaApiClient.models.span import Span
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FloatHistogram(BaseModel):
    """
    A FloatHistogram is needed by PromQL to handle operations that might result in fractional counts. Since the counts in a histogram are unlikely to be too large to be represented precisely by a float64, a FloatHistogram can also be used to represent a histogram with integer counts and thus serves as a more generalized representation.
    """ # noqa: E501
    count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total number of observations. Must be zero or positive.", alias="Count")
    counter_reset_hint: Optional[StrictInt] = Field(default=None, description="or alternatively that we are dealing with a gauge histogram, where counter resets do not apply.", alias="CounterResetHint")
    positive_buckets: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Observation counts in buckets. Each represents an absolute count and must be zero or positive.", alias="PositiveBuckets")
    positive_spans: Optional[List[Span]] = Field(default=None, description="Spans for positive and negative buckets (see Span below).", alias="PositiveSpans")
    var_schema: Optional[StrictInt] = Field(default=None, description="Currently valid schema numbers are -4 <= n <= 8.  They are all for base-2 bucket schemas, where 1 is a bucket boundary in each case, and then each power of two is divided into 2^n logarithmic buckets.  Or in other words, each bucket boundary is the previous boundary times 2^(2^-n).", alias="Schema")
    sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of observations. This is also used as the stale marker.", alias="Sum")
    zero_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Observations falling into the zero bucket. Must be zero or positive.", alias="ZeroCount")
    zero_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Width of the zero bucket.", alias="ZeroThreshold")
    __properties: ClassVar[List[str]] = ["Count", "CounterResetHint", "PositiveBuckets", "PositiveSpans", "Schema", "Sum", "ZeroCount", "ZeroThreshold"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FloatHistogram from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in positive_spans (list)
        _items = []
        if self.positive_spans:
            for _item in self.positive_spans:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PositiveSpans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FloatHistogram from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Count": obj.get("Count"),
            "CounterResetHint": obj.get("CounterResetHint"),
            "PositiveBuckets": obj.get("PositiveBuckets"),
            "PositiveSpans": [Span.from_dict(_item) for _item in obj.get("PositiveSpans")] if obj.get("PositiveSpans") is not None else None,
            "Schema": obj.get("Schema"),
            "Sum": obj.get("Sum"),
            "ZeroCount": obj.get("ZeroCount"),
            "ZeroThreshold": obj.get("ZeroThreshold")
        })
        return _obj


