# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class URL(BaseModel):
    """
    The general form represented is:  [scheme:][//[userinfo@]host][/]path[?query][#fragment]  URLs that do not start with a slash after the scheme are interpreted as:  scheme:opaque[?query][#fragment]  Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, the code should use the EscapedPath method, which preserves the original encoding of Path.  The RawPath field is an optional field which is only set when the default encoding of Path is different from the escaped path. See the EscapedPath method for more details.  URL's String method uses the EscapedPath method to obtain the path.
    """ # noqa: E501
    force_query: Optional[StrictBool] = Field(default=None, alias="ForceQuery")
    fragment: Optional[StrictStr] = Field(default=None, alias="Fragment")
    host: Optional[StrictStr] = Field(default=None, alias="Host")
    omit_host: Optional[StrictBool] = Field(default=None, alias="OmitHost")
    opaque: Optional[StrictStr] = Field(default=None, alias="Opaque")
    path: Optional[StrictStr] = Field(default=None, alias="Path")
    raw_fragment: Optional[StrictStr] = Field(default=None, alias="RawFragment")
    raw_path: Optional[StrictStr] = Field(default=None, alias="RawPath")
    raw_query: Optional[StrictStr] = Field(default=None, alias="RawQuery")
    scheme: Optional[StrictStr] = Field(default=None, alias="Scheme")
    user: Optional[Union[str, Any]] = Field(default=None, description="The Userinfo type is an immutable encapsulation of username and password details for a URL. An existing Userinfo value is guaranteed to have a username set (potentially empty, as allowed by RFC 2396), and optionally a password.", alias="User")
    __properties: ClassVar[List[str]] = ["ForceQuery", "Fragment", "Host", "OmitHost", "Opaque", "Path", "RawFragment", "RawPath", "RawQuery", "Scheme", "User"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of URL from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of URL from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ForceQuery": obj.get("ForceQuery"),
            "Fragment": obj.get("Fragment"),
            "Host": obj.get("Host"),
            "OmitHost": obj.get("OmitHost"),
            "Opaque": obj.get("Opaque"),
            "Path": obj.get("Path"),
            "RawFragment": obj.get("RawFragment"),
            "RawPath": obj.get("RawPath"),
            "RawQuery": obj.get("RawQuery"),
            "Scheme": obj.get("Scheme"),
            "User": obj.get("User")
        })
        return _obj


