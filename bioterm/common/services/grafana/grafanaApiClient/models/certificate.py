# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from grafanaApiClient.models.extension import Extension
from grafanaApiClient.models.ip_net import IPNet
from grafanaApiClient.models.name import Name
from grafanaApiClient.models.url import URL
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Certificate(BaseModel):
    """
    Certificate
    """ # noqa: E501
    authority_key_id: Optional[List[StrictInt]] = Field(default=None, alias="AuthorityKeyId")
    basic_constraints_valid: Optional[StrictBool] = Field(default=None, description="BasicConstraintsValid indicates whether IsCA, MaxPathLen, and MaxPathLenZero are valid.", alias="BasicConstraintsValid")
    crl_distribution_points: Optional[List[StrictStr]] = Field(default=None, description="CRL Distribution Points", alias="CRLDistributionPoints")
    dns_names: Optional[List[StrictStr]] = Field(default=None, description="Subject Alternate Name values. (Note that these values may not be valid if invalid values were contained within a parsed certificate. For example, an element of DNSNames may not be a valid DNS domain name.)", alias="DNSNames")
    email_addresses: Optional[List[StrictStr]] = Field(default=None, alias="EmailAddresses")
    excluded_dns_domains: Optional[List[StrictStr]] = Field(default=None, alias="ExcludedDNSDomains")
    excluded_email_addresses: Optional[List[StrictStr]] = Field(default=None, alias="ExcludedEmailAddresses")
    excluded_ip_ranges: Optional[List[IPNet]] = Field(default=None, alias="ExcludedIPRanges")
    excluded_uri_domains: Optional[List[StrictStr]] = Field(default=None, alias="ExcludedURIDomains")
    ext_key_usage: Optional[List[StrictInt]] = Field(default=None, alias="ExtKeyUsage")
    extensions: Optional[List[Extension]] = Field(default=None, description="Extensions contains raw X.509 extensions. When parsing certificates, this can be used to extract non-critical extensions that are not parsed by this package. When marshaling certificates, the Extensions field is ignored, see ExtraExtensions.", alias="Extensions")
    extra_extensions: Optional[List[Extension]] = Field(default=None, description="ExtraExtensions contains extensions to be copied, raw, into any marshaled certificates. Values override any extensions that would otherwise be produced based on the other fields. The ExtraExtensions field is not populated when parsing certificates, see Extensions.", alias="ExtraExtensions")
    ip_addresses: Optional[List[StrictStr]] = Field(default=None, alias="IPAddresses")
    is_ca: Optional[StrictBool] = Field(default=None, alias="IsCA")
    issuer: Optional[Name] = Field(default=None, alias="Issuer")
    issuing_certificate_url: Optional[List[StrictStr]] = Field(default=None, alias="IssuingCertificateURL")
    key_usage: Optional[StrictInt] = Field(default=None, description="KeyUsage represents the set of actions that are valid for a given key. It's a bitmap of the KeyUsage* constants.", alias="KeyUsage")
    max_path_len: Optional[StrictInt] = Field(default=None, description="MaxPathLen and MaxPathLenZero indicate the presence and value of the BasicConstraints' \"pathLenConstraint\".  When parsing a certificate, a positive non-zero MaxPathLen means that the field was specified, -1 means it was unset, and MaxPathLenZero being true mean that the field was explicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false should be treated equivalent to -1 (unset).  When generating a certificate, an unset pathLenConstraint can be requested with either MaxPathLen == -1 or using the zero value for both MaxPathLen and MaxPathLenZero.", alias="MaxPathLen")
    max_path_len_zero: Optional[StrictBool] = Field(default=None, description="MaxPathLenZero indicates that BasicConstraintsValid==true and MaxPathLen==0 should be interpreted as an actual maximum path length of zero. Otherwise, that combination is interpreted as MaxPathLen not being set.", alias="MaxPathLenZero")
    not_before: Optional[datetime] = Field(default=None, alias="NotBefore")
    ocsp_server: Optional[List[StrictStr]] = Field(default=None, description="RFC 5280, 4.2.2.1 (Authority Information Access)", alias="OCSPServer")
    permitted_dns_domains: Optional[List[StrictStr]] = Field(default=None, alias="PermittedDNSDomains")
    permitted_dns_domains_critical: Optional[StrictBool] = Field(default=None, description="Name constraints", alias="PermittedDNSDomainsCritical")
    permitted_email_addresses: Optional[List[StrictStr]] = Field(default=None, alias="PermittedEmailAddresses")
    permitted_ip_ranges: Optional[List[IPNet]] = Field(default=None, alias="PermittedIPRanges")
    permitted_uri_domains: Optional[List[StrictStr]] = Field(default=None, alias="PermittedURIDomains")
    policy_identifiers: Optional[List[List[StrictInt]]] = Field(default=None, alias="PolicyIdentifiers")
    public_key: Optional[Any] = Field(default=None, alias="PublicKey")
    public_key_algorithm: Optional[StrictInt] = Field(default=None, alias="PublicKeyAlgorithm")
    raw: Optional[List[StrictInt]] = Field(default=None, alias="Raw")
    raw_issuer: Optional[List[StrictInt]] = Field(default=None, alias="RawIssuer")
    raw_subject: Optional[List[StrictInt]] = Field(default=None, alias="RawSubject")
    raw_subject_public_key_info: Optional[List[StrictInt]] = Field(default=None, alias="RawSubjectPublicKeyInfo")
    raw_tbs_certificate: Optional[List[StrictInt]] = Field(default=None, alias="RawTBSCertificate")
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    signature: Optional[List[StrictInt]] = Field(default=None, alias="Signature")
    signature_algorithm: Optional[StrictInt] = Field(default=None, alias="SignatureAlgorithm")
    subject: Optional[Name] = Field(default=None, alias="Subject")
    subject_key_id: Optional[List[StrictInt]] = Field(default=None, alias="SubjectKeyId")
    uris: Optional[List[URL]] = Field(default=None, alias="URIs")
    unhandled_critical_extensions: Optional[List[List[StrictInt]]] = Field(default=None, description="UnhandledCriticalExtensions contains a list of extension IDs that were not (fully) processed when parsing. Verify will fail if this slice is non-empty, unless verification is delegated to an OS library which understands all the critical extensions.  Users can access these extensions using Extensions and can remove elements from this slice if they believe that they have been handled.", alias="UnhandledCriticalExtensions")
    unknown_ext_key_usage: Optional[List[List[StrictInt]]] = Field(default=None, alias="UnknownExtKeyUsage")
    version: Optional[StrictInt] = Field(default=None, alias="Version")
    __properties: ClassVar[List[str]] = ["AuthorityKeyId", "BasicConstraintsValid", "CRLDistributionPoints", "DNSNames", "EmailAddresses", "ExcludedDNSDomains", "ExcludedEmailAddresses", "ExcludedIPRanges", "ExcludedURIDomains", "ExtKeyUsage", "Extensions", "ExtraExtensions", "IPAddresses", "IsCA", "Issuer", "IssuingCertificateURL", "KeyUsage", "MaxPathLen", "MaxPathLenZero", "NotBefore", "OCSPServer", "PermittedDNSDomains", "PermittedDNSDomainsCritical", "PermittedEmailAddresses", "PermittedIPRanges", "PermittedURIDomains", "PolicyIdentifiers", "PublicKey", "PublicKeyAlgorithm", "Raw", "RawIssuer", "RawSubject", "RawSubjectPublicKeyInfo", "RawTBSCertificate", "SerialNumber", "Signature", "SignatureAlgorithm", "Subject", "SubjectKeyId", "URIs", "UnhandledCriticalExtensions", "UnknownExtKeyUsage", "Version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Certificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in excluded_ip_ranges (list)
        _items = []
        if self.excluded_ip_ranges:
            for _item in self.excluded_ip_ranges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ExcludedIPRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item in self.extensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Extensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extra_extensions (list)
        _items = []
        if self.extra_extensions:
            for _item in self.extra_extensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ExtraExtensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of issuer
        if self.issuer:
            _dict['Issuer'] = self.issuer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permitted_ip_ranges (list)
        _items = []
        if self.permitted_ip_ranges:
            for _item in self.permitted_ip_ranges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PermittedIPRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['Subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in uris (list)
        _items = []
        if self.uris:
            for _item in self.uris:
                if _item:
                    _items.append(_item.to_dict())
            _dict['URIs'] = _items
        # set to None if public_key (nullable) is None
        # and model_fields_set contains the field
        if self.public_key is None and "public_key" in self.model_fields_set:
            _dict['PublicKey'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Certificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AuthorityKeyId": obj.get("AuthorityKeyId"),
            "BasicConstraintsValid": obj.get("BasicConstraintsValid"),
            "CRLDistributionPoints": obj.get("CRLDistributionPoints"),
            "DNSNames": obj.get("DNSNames"),
            "EmailAddresses": obj.get("EmailAddresses"),
            "ExcludedDNSDomains": obj.get("ExcludedDNSDomains"),
            "ExcludedEmailAddresses": obj.get("ExcludedEmailAddresses"),
            "ExcludedIPRanges": [IPNet.from_dict(_item) for _item in obj.get("ExcludedIPRanges")] if obj.get("ExcludedIPRanges") is not None else None,
            "ExcludedURIDomains": obj.get("ExcludedURIDomains"),
            "ExtKeyUsage": obj.get("ExtKeyUsage"),
            "Extensions": [Extension.from_dict(_item) for _item in obj.get("Extensions")] if obj.get("Extensions") is not None else None,
            "ExtraExtensions": [Extension.from_dict(_item) for _item in obj.get("ExtraExtensions")] if obj.get("ExtraExtensions") is not None else None,
            "IPAddresses": obj.get("IPAddresses"),
            "IsCA": obj.get("IsCA"),
            "Issuer": Name.from_dict(obj.get("Issuer")) if obj.get("Issuer") is not None else None,
            "IssuingCertificateURL": obj.get("IssuingCertificateURL"),
            "KeyUsage": obj.get("KeyUsage"),
            "MaxPathLen": obj.get("MaxPathLen"),
            "MaxPathLenZero": obj.get("MaxPathLenZero"),
            "NotBefore": obj.get("NotBefore"),
            "OCSPServer": obj.get("OCSPServer"),
            "PermittedDNSDomains": obj.get("PermittedDNSDomains"),
            "PermittedDNSDomainsCritical": obj.get("PermittedDNSDomainsCritical"),
            "PermittedEmailAddresses": obj.get("PermittedEmailAddresses"),
            "PermittedIPRanges": [IPNet.from_dict(_item) for _item in obj.get("PermittedIPRanges")] if obj.get("PermittedIPRanges") is not None else None,
            "PermittedURIDomains": obj.get("PermittedURIDomains"),
            "PolicyIdentifiers": obj.get("PolicyIdentifiers"),
            "PublicKey": obj.get("PublicKey"),
            "PublicKeyAlgorithm": obj.get("PublicKeyAlgorithm"),
            "Raw": obj.get("Raw"),
            "RawIssuer": obj.get("RawIssuer"),
            "RawSubject": obj.get("RawSubject"),
            "RawSubjectPublicKeyInfo": obj.get("RawSubjectPublicKeyInfo"),
            "RawTBSCertificate": obj.get("RawTBSCertificate"),
            "SerialNumber": obj.get("SerialNumber"),
            "Signature": obj.get("Signature"),
            "SignatureAlgorithm": obj.get("SignatureAlgorithm"),
            "Subject": Name.from_dict(obj.get("Subject")) if obj.get("Subject") is not None else None,
            "SubjectKeyId": obj.get("SubjectKeyId"),
            "URIs": [URL.from_dict(_item) for _item in obj.get("URIs")] if obj.get("URIs") is not None else None,
            "UnhandledCriticalExtensions": obj.get("UnhandledCriticalExtensions"),
            "UnknownExtKeyUsage": obj.get("UnknownExtKeyUsage"),
            "Version": obj.get("Version")
        })
        return _obj


