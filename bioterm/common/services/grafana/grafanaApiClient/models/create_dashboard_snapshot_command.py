# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateDashboardSnapshotCommand(BaseModel):
    """
    CreateDashboardSnapshotCommand
    """ # noqa: E501
    dashboard: Union[str, Any]
    delete_key: Optional[StrictStr] = Field(default=None, description="Unique key used to delete the snapshot. It is different from the `key` so that only the creator can delete the snapshot. Required if `external` is `true`.", alias="deleteKey")
    expires: Optional[StrictInt] = Field(default=0, description="When the snapshot should expire in seconds in seconds. Default is never to expire.")
    external: Optional[StrictBool] = Field(default=False, description="these are passed when storing an external snapshot ref Save the snapshot on an external server rather than locally.")
    key: Optional[StrictStr] = Field(default=None, description="Define the unique key. Required if `external` is `true`.")
    name: Optional[StrictStr] = Field(default=None, description="Snapshot name")
    __properties: ClassVar[List[str]] = ["dashboard", "deleteKey", "expires", "external", "key", "name"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateDashboardSnapshotCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateDashboardSnapshotCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dashboard": obj.get("dashboard"),
            "deleteKey": obj.get("deleteKey"),
            "expires": obj.get("expires") if obj.get("expires") is not None else 0,
            "external": obj.get("external") if obj.get("external") is not None else False,
            "key": obj.get("key"),
            "name": obj.get("name")
        })
        return _obj


