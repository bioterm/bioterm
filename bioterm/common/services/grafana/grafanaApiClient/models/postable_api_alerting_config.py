# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from grafanaApiClient.models.global_config import GlobalConfig
from grafanaApiClient.models.inhibit_rule import InhibitRule
from grafanaApiClient.models.mute_time_interval import MuteTimeInterval
from grafanaApiClient.models.postable_api_receiver import PostableApiReceiver
from grafanaApiClient.models.route import Route
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PostableApiAlertingConfig(BaseModel):
    """
    PostableApiAlertingConfig
    """ # noqa: E501
    var_global: Optional[GlobalConfig] = Field(default=None, alias="global")
    inhibit_rules: Optional[List[InhibitRule]] = None
    mute_time_intervals: Optional[List[MuteTimeInterval]] = None
    receivers: Optional[List[PostableApiReceiver]] = Field(default=None, description="Override with our superset receiver type")
    route: Optional[Route] = None
    templates: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["global", "inhibit_rules", "mute_time_intervals", "receivers", "route", "templates"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PostableApiAlertingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_global
        if self.var_global:
            _dict['global'] = self.var_global.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in inhibit_rules (list)
        _items = []
        if self.inhibit_rules:
            for _item in self.inhibit_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inhibit_rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mute_time_intervals (list)
        _items = []
        if self.mute_time_intervals:
            for _item in self.mute_time_intervals:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mute_time_intervals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in receivers (list)
        _items = []
        if self.receivers:
            for _item in self.receivers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['receivers'] = _items
        # override the default output from pydantic by calling `to_dict()` of route
        if self.route:
            _dict['route'] = self.route.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PostableApiAlertingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "global": GlobalConfig.from_dict(obj.get("global")) if obj.get("global") is not None else None,
            "inhibit_rules": [InhibitRule.from_dict(_item) for _item in obj.get("inhibit_rules")] if obj.get("inhibit_rules") is not None else None,
            "mute_time_intervals": [MuteTimeInterval.from_dict(_item) for _item in obj.get("mute_time_intervals")] if obj.get("mute_time_intervals") is not None else None,
            "receivers": [PostableApiReceiver.from_dict(_item) for _item in obj.get("receivers")] if obj.get("receivers") is not None else None,
            "route": Route.from_dict(obj.get("route")) if obj.get("route") is not None else None,
            "templates": obj.get("templates")
        })
        return _obj


