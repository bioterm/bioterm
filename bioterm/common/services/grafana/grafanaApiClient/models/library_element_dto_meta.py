# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from grafanaApiClient.models.library_element_dto_meta_user import LibraryElementDTOMetaUser
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class LibraryElementDTOMeta(BaseModel):
    """
    LibraryElementDTOMeta
    """ # noqa: E501
    connected_dashboards: Optional[StrictInt] = Field(default=None, alias="connectedDashboards")
    created: Optional[datetime] = None
    created_by: Optional[LibraryElementDTOMetaUser] = Field(default=None, alias="createdBy")
    folder_name: Optional[StrictStr] = Field(default=None, alias="folderName")
    folder_uid: Optional[StrictStr] = Field(default=None, alias="folderUid")
    updated: Optional[datetime] = None
    updated_by: Optional[LibraryElementDTOMetaUser] = Field(default=None, alias="updatedBy")
    __properties: ClassVar[List[str]] = ["connectedDashboards", "created", "createdBy", "folderName", "folderUid", "updated", "updatedBy"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LibraryElementDTOMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updatedBy'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of LibraryElementDTOMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectedDashboards": obj.get("connectedDashboards"),
            "created": obj.get("created"),
            "createdBy": LibraryElementDTOMetaUser.from_dict(obj.get("createdBy")) if obj.get("createdBy") is not None else None,
            "folderName": obj.get("folderName"),
            "folderUid": obj.get("folderUid"),
            "updated": obj.get("updated"),
            "updatedBy": LibraryElementDTOMetaUser.from_dict(obj.get("updatedBy")) if obj.get("updatedBy") is not None else None
        })
        return _obj


