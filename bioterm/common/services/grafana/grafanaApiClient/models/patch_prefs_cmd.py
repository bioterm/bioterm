# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.

    The version of the OpenAPI document: 0.0.1
    Contact: hello@grafana.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from grafanaApiClient.models.query_history_preference import QueryHistoryPreference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PatchPrefsCmd(BaseModel):
    """
    PatchPrefsCmd
    """ # noqa: E501
    cookies: Optional[List[StrictStr]] = None
    home_dashboard_id: Optional[StrictInt] = Field(default=0, description="The numerical :id of a favorited dashboard", alias="homeDashboardId")
    home_dashboard_uid: Optional[StrictStr] = Field(default=None, alias="homeDashboardUID")
    language: Optional[StrictStr] = None
    query_history: Optional[QueryHistoryPreference] = Field(default=None, alias="queryHistory")
    theme: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = None
    week_start: Optional[StrictStr] = Field(default=None, alias="weekStart")
    __properties: ClassVar[List[str]] = ["cookies", "homeDashboardId", "homeDashboardUID", "language", "queryHistory", "theme", "timezone", "weekStart"]

    @field_validator('theme')
    def theme_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('light', 'dark'):
            raise ValueError("must be one of enum values ('light', 'dark')")
        return value

    @field_validator('timezone')
    def timezone_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('utc', 'browser'):
            raise ValueError("must be one of enum values ('utc', 'browser')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PatchPrefsCmd from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of query_history
        if self.query_history:
            _dict['queryHistory'] = self.query_history.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PatchPrefsCmd from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cookies": obj.get("cookies"),
            "homeDashboardId": obj.get("homeDashboardId") if obj.get("homeDashboardId") is not None else 0,
            "homeDashboardUID": obj.get("homeDashboardUID"),
            "language": obj.get("language"),
            "queryHistory": QueryHistoryPreference.from_dict(obj.get("queryHistory")) if obj.get("queryHistory") is not None else None,
            "theme": obj.get("theme"),
            "timezone": obj.get("timezone"),
            "weekStart": obj.get("weekStart")
        })
        return _obj


